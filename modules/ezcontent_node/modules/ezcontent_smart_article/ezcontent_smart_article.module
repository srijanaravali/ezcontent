<?php

/**
 * @file
 * Module file for ezcontent_smart_article.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\Html;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\ReplaceCommand;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ezcontent_smart_article_form_node_form_alter(&$form, FormStateInterface $form_state) {
  if (in_array($form['#form_id'], [
    'node_smart_article_edit_form',
    'node_smart_article_form',
  ])) {
    $summary_config = \Drupal::config('summary_generator.settings');
    if (empty($summary_config->get('summary_generator_api_url')) ||
      empty($summary_config->get('summary_generator_data_file')) ||
      empty($summary_config->get('image_captioning_api_url')) ||
      empty($summary_config->get('abstractive_summary_api_url')) ||
      empty($summary_config->get('extractive_summary_api_url')) ||
      empty($summary_config->get('smart_tags_api_url'))) {
      \Drupal::messenger()
        ->addError(t('Smart Article is proprietary, license-based with <a href="@link"> Srijan</a>.Please contact at <a href="@mailtolink">business@srijan.net</a> for more information.',
          ['@link' => 'https://www.srijan.net/','@mailtolink'=> 'mailto:business@srijan.net']));
    }
    // Make Company name Autocomplete.
    $form['field_company_name']['widget'][0]['value']['#autocomplete_route_name'] = 'ezcontent_smart_article.autocomplete.companies';
    // Add a generate summary button and hide body field.
    $form['generate_summary'] = [
      '#type' => 'submit',
      '#name' => 'generate_summary',
      '#value' => t('Generate Summary'),
      '#weight' => 11,
      '#attributes' => empty($summary_config->get('summary_generator_api_url')) ? [
        'disabled' => 'disabled'
      ] : [],
      '#ajax' => [
        'callback' => 'ezcontent_smart_article_generate_callback',
        'wrapper' => 'form-summary-generate-wrapper',
        'effect' => 'fade',
        'event' => 'click',
        'progress' => [
          'type' => 'throbber',
          'message' => 'Please wait...',
        ],
      ],
    ];
    $form['#attached']['library'][] = 'ezcontent_smart_article/ezcontent_smart_article_libs';

    if (isset($form['body'])) {
      if ($form['body']['widget'][0]['#default_value'] == '') {
        $form['body']['#attributes']['class'][] = 'hide-body--field';
        $form['body']['#attributes']['style'] = 'display:none;';
      }
    }
    // Check if smart summary exist.
    if (isset($form['field_smart_text_summary']['widget'][0]['summary'])) {
      $form['field_smart_text_summary']['widget'][0]['summary_container']['number_of_sentences']['#states'] = [
        'visible' => [
          ':input[name="field_smart_text_summary[0][summary_container][summary_type]"]' => ['value' => 'extractive'],
        ],
      ];
      $form['field_smart_text_summary']['widget'][0]['summary_container']['generate_smart_summary']['#ajax'] = [
        'callback' => 'ezcontent_smart_summary_generate_callback',
        'wrapper' => 'form-smart-summary-generate-wrapper',
        'effect' => 'fade',
        'event' => 'click',
        'progress' => [
          'type' => 'throbber',
          'message' => 'Please wait...',
        ],
      ];
      // Disable summary generate button if subscription keys not available.
      $form['field_smart_text_summary']['widget'][0]['summary_container']['generate_smart_summary']['#attributes']
        = (empty($summary_config->get('abstractive_summary_api_url')) || empty($summary_config->get('extractive_summary_api_url')))
        ? ['disabled' => 'disabled'] : [];
      // Add submit handler to update summary.
      $form['actions']['submit']['#submit'][] = 'update_summary_field_submit_handler';
    }
    // Add a process to field_company_logo.
    if (!empty($form['field_company_logo'])) {
      $form['field_company_logo']['widget'][0]['#process'][] = 'ezcontent_smart_article_get_alt_title';
    }
    // Disable auto caption feature if subscription keys not available.
    $form['field_company_logo']['widget'][0]['#attributes'] = empty($summary_config->get('image_captioning_api_url')) ? ['disabled' => 'disabled'] : [];
    // Code for Smart Tags.
    $bundle = $entity_type = '';
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof ContentEntityForm) {
      $bundle = $form_object->getEntity()->bundle();
      $entity_type = $form_object->getEntity()->getEntityTypeId();
      if (!empty($entity_type) && !empty($bundle)) {
        $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type, $bundle);
        $smart_tags = \Drupal::service('ezcontent_smart_article.generate_smarttags');
        $term_reference_field = $smart_tags->findTermReferenceFieldsForEntityType($field_definitions, $bundle);
        if (!empty($term_reference_field)) {
          $ref_tag_field_settings = $field_definitions[$term_reference_field]->getSettings();
          $form['message'] = [
            '#type' => 'markup',
            '#weight' => -10,
            '#markup' => '<span class="validate-message"></span>',
          ];
          if (isset($form[$term_reference_field])) {
            $form[$term_reference_field]['link_field'] = [
              '#type' => 'hidden',
              '#value' => $ref_tag_field_settings['long_text_fields'],
            ];
            $form[$term_reference_field]['widget']['smart_tags_submit']['#ajax'] = [
              'callback' => 'generate_tags_form_submit',
              'wrapper' => 'generate-tags',
            ];
            // Disable smart tag button if subscription keys not available.
            $form[$term_reference_field]['widget']['smart_tags_submit']['#attributes'] = empty($summary_config->get('smart_tags_api_url')) ? ['disabled' => 'disabled'] : [];
          }
        }
      }
    }
  }
}

/**
 * Summary generator callback.
 *
 * @todo: Move to a service.
 */
function ezcontent_smart_article_generate_callback(&$form, FormStateInterface $form_state) {
  $results = \Drupal::service('ezcontent_smart_article.companies_list');
  $company_name = $form_state->getValue('field_company_name')[0]['value'];
  $text = $results->getData($company_name, 'article');

  $response = new AjaxResponse();
  $arguments = [$text, 'edit-body-0-value'];
  $response->addCommand(new InvokeCommand(NULL, "update_text_editor", $arguments));
  $response->addCommand(new InvokeCommand('.hide-body--field', 'show'));
  return $response;
}

/**
 * Summary generator callback.
 *
 * @todo: Move to a service.
 */
function ezcontent_smart_summary_generate_callback(&$form, FormStateInterface $form_state) {
  $generate_summary = \Drupal::service('ezcontent_smart_article.generate_summary');
  $summary_type = $form_state->getValue('field_smart_text_summary')[0]['summary_container']['summary_type'];
  $number_of_sentences = $form_state->getValue('field_smart_text_summary')[0]['summary_container']['number_of_sentences'];
  $article = Html::decodeEntities(strip_tags($form_state->getValue('field_smart_text_summary')[0]['value']));
  $text = Json::decode($generate_summary->generateSummary($article, $summary_type, $number_of_sentences));
  $summary = $text['data']['data']['summary'];

  $response = new AjaxResponse();
  $arguments = [$summary, 'edit-field-smart-text-summary-0-summary-container-summary-area'];
  $response->addCommand(new InvokeCommand(NULL, "update_summary_text", $arguments));
  return $response;
}

/**
 * Summary generator callback.
 *
 * @todo: Move to a service.
 */
function update_summary_field_submit_handler(&$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $summary = $form_state->getValue('field_smart_text_summary')[0]['summary_container']['summary_area'];
  $entity->get('field_smart_text_summary')->summary = $summary;
  $entity->save();
}

/**
 * Process callback: Adds the ALT title to image.
 *
 * @todo: Move to a service.
 *
 * @param array $element
 *   Form API element.
 *
 * @return array $element
 */
function ezcontent_smart_article_get_alt_title(array $element, FormStateInterface $form_state, array &$form) {
  $item = $element['#value'];
  if (!empty($item['fids'])) {
    $file = File::load($item['fids'][0]);
    $image_file = file_get_contents(\Drupal::service('file_system')->realpath($file->getFileUri()));

    $url = \Drupal::config('summary_generator.settings')->get('image_captioning_api_url');
    $response = \Drupal::service('http_client')->request('POST', $url, [
      'headers' => [
        'content-type' => $file->getMimeType(),
      ],
      'body' => $image_file,
    ]);
    if ($response->getStatusCode() == 200) {
      $body = \Drupal::service('serialization.json')->decode($response->getBody()->getContents());
      $element['alt']['#default_value'] = $body['data']['caption'];
    }

  }
  return $element;
}

/**
 * Implements form submit handler for smarttags.
 */
function generate_tags_form_submit(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $renderer = \Drupal::service('renderer');
  $node = $form_state->getFormObject()->getEntity();
  $link_field = $form_state->getValue('link_field');
  $link_field_label = $node->$link_field->getFieldDefinition()->getLabel();
  $field = $form_state->getValue($link_field);
  if (empty($field[0]['value'])) {
    $drupal_messenger = \Drupal::messenger();
    $drupal_messenger->addError(t('@link_field_label field required.', ['@link_field_label' => $link_field_label]));
    $message = [
      '#theme' => 'status_messages',
      '#message_list' => $drupal_messenger->all()
    ];
    $messages = $renderer->render($message);
    $drupal_messenger->deleteByType('error');
    $link_field_id = str_replace('_', '-', $link_field);
    $response->addCommand(new HtmlCommand('.validate-message', $messages));
    $response->addCommand(new InvokeCommand("#edit-$link_field_id-0-value", 'addClass', ['error']));
  }
  else {
    $smart_tags = \Drupal::service('ezcontent_smart_article.generate_smarttags');
    $tags = $smart_tags->getTags(Json::encode($field[0]['value']));
    if ($tags) {
      $auto_tags = [
        '#theme' => 'smarttag_template',
        '#tags' => $tags,
      ];
      $rendered_field = $renderer->render($auto_tags);
      $response->addCommand(new ReplaceCommand('#auto-tags', $rendered_field));
    }
  }
  return $response;
}

/**
 * Implements hook_theme().
 */
function ezcontent_smart_article_theme($existing, $type, $theme, $path) {
  return [
    'smarttag_template' => [
      'variables' => ['tags' => []],
    ],
    'smart_article_get_subscription_landing_page' => [
      'variables' => [],
    ]
  ];
}
