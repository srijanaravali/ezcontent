<?php

/**
 * @file
 * Contains updates hook.
 */

use Drupal\Component\Serialization\Yaml;

/**
 * Editor role permission update.
 */
function ezcontent_user_update_8001() {
  /** @var \Drupal\update_helper\Updater $updateHelper */
  $updateHelper = \Drupal::service('update_helper.updater');

  // Execute configuration update definitions with logging of success.
  $updateHelper->executeUpdate('ezcontent_user', 'ezcontent_user_update_8001');

  // Output logged messages to related channel of update execution.
  return $updateHelper->logger()->output();
}

/**
 * Add password policy constraints.
 */
function ezcontent_user_update_8002() {
  // Install password_policy and sub modules.
  \Drupal::service('module_installer')->install(
    [
      'password_policy',
      'password_policy_length',
      'password_policy_character_types',
      'password_policy_characters',
      'password_policy_consecutive',
      'password_policy_history',
      'password_policy_username',
    ], TRUE);
  $module_path = drupal_get_path('module', 'ezcontent_user');
  $file = 'password_policy.password_policy.basic_policy';
  $config_path = $module_path . '/config/install/' . $file . '.yml';
  $updated = [];
  $created = [];
  /** @var \Drupal\Core\Config\ConfigManagerInterface $config_manager */
  $config_manager = \Drupal::service('config.manager');
  $raw = file_get_contents($config_path);
  $value = Yaml::decode($raw);
  if (!is_array($value)) {
    throw new \RuntimeException(sprintf('Invalid YAML file %s'), $file);
  }
  $type = $config_manager->getEntityTypeIdByName(basename($file));
  $entity_manager = $config_manager->getEntityTypeManager();
  $definition = $entity_manager->getDefinition($type);
  $id_key = $definition->getKey('id');
  $id = $value[$id_key];
  /** @var \Drupal\Core\Config\Entity\ConfigEntityStorage $entity_storage */
  $entity_storage = $entity_manager->getStorage($type);
  $entity = $entity_storage->load($id);
  if ($entity) {
    $entity = $entity_storage->updateFromStorageRecord($entity, $value);
    $entity->save();
    $updated[] = $id;
  }
  else {
    $entity = $entity_storage->createFromStorageRecord($value);
    $entity->save();
    $created[] = $id;
  }
  return [
    'udpated' => $updated,
    'created' => $created,
  ];
}
